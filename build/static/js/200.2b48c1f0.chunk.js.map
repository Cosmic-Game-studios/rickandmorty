{"version":3,"file":"static/js/200.2b48c1f0.chunk.js","mappings":"kKAsBA,QAnBA,WAAwC,IAAnBA,EAAUC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IAChC,MAAOG,EAAUC,IAAeC,EAAAA,EAAAA,WAAS,IAAMC,OAAOC,WAAaR,IAenE,OAbAS,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAeA,KACnBL,EAAYE,OAAOC,WAAaR,EAAW,EAM7C,OAHAO,OAAOI,iBAAiB,SAAUD,GAG3B,KACLH,OAAOK,oBAAoB,SAAUF,EAAa,CACnD,GACA,CAACV,IAEGI,CACT,C,oGCfA,MAAMS,EACO,YADPA,EAEE,OAFFA,EAGK,UAILC,EACI,SADJA,EAGE,OAHFA,EAIE,OAJFA,EAKO,YAIPC,EAAQC,IAAiC,IAAhC,QAAEC,EAAO,KAAEC,EAAI,QAAEC,GAASH,EASvC,OARAP,EAAAA,EAAAA,YAAU,KACR,MAAMW,EAAQC,YAAW,KACvBF,GAAS,GACR,KAEH,MAAO,IAAMG,aAAaF,EAAM,GAC/B,CAACD,KAGFI,EAAAA,EAAAA,MAAA,OAAKC,UAAS,iBAAAC,OAAmBP,GAAOQ,SAAA,EACtCC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,wBAAuBE,SAAET,KACxCU,EAAAA,EAAAA,KAAA,UAAQH,UAAU,sBAAsBI,QAAST,EAAQO,SAAC,WACtD,EAMJG,EAAgB,GAGhBC,EAA2B,CAC/B,CACEC,GAAI,IACJC,YAAa,iDACbC,oBAAqB,8IACrBC,OAAQ,IACRhB,KAAML,EACNsB,WAAY,SACZC,cAAe,SACfC,OAAO,EACPC,OAAQ,CACNP,GAAI,IACJQ,KAAM,cACNC,MAAO,4DACPC,OAAQ3B,IAGZ,CACEiB,GAAI,IACJC,YAAa,yCACbC,oBAAqB,uHACrBC,OAAQ,IACRhB,KAAML,EACNsB,WAAY,SACZC,cAAe,SACfC,OAAO,EACPC,OAAQ,CACNP,GAAI,IACJQ,KAAM,eACNC,MAAO,4DACPC,OA3DM,aA8DV,CACEV,GAAI,IACJC,YAAa,qDACbC,oBAAqB,uIACrBC,OAAQ,IACRhB,KAAML,EACNsB,WAAY,OACZC,cAAe,SACfC,OAAO,EACPK,gBAAiB,EACjBJ,OAAQ,CACNP,GAAI,IACJQ,KAAM,cACNC,MAAO,4DACPC,OAAQ3B,IAGZ,CACEiB,GAAI,IACJC,YAAa,kEACbC,oBAAqB,mIACrBC,OAAQ,IACRhB,KAAML,EACNsB,WAAY,YACZC,cAAe,SACfC,OAAO,EACPK,gBAAiB,EACjBJ,OAAQ,CACNP,GAAI,GACJQ,KAAM,aACNC,MAAO,2DACPC,OAAQ3B,IAGZ,CACEiB,GAAI,IACJC,YAAa,0DACbC,oBAAqB,0IACrBC,OAAQ,IACRhB,KAAML,EACNsB,WAAY,UACZC,cAAe,SACfC,OAAO,EACPK,gBAAiB,EACjBJ,OAAQ,CACNP,GAAI,IACJQ,KAAM,QACNC,MAAO,4DACPC,OAAQ3B,KAicd,QA5bA,WACE,MAAMV,GAAWuC,EAAAA,EAAAA,MACX,gBAAEC,EAAe,gBAAEC,EAAe,SAAEC,EAAQ,MAAEC,IAAUC,EAAAA,EAAAA,YAAWC,EAAAA,KAClEC,EAAQC,IAAa7C,EAAAA,EAAAA,UAAS,QAC9B8C,EAAOC,IAAY/C,EAAAA,EAAAA,UAAS,CAAEgD,SAAS,EAAOrC,QAAS,GAAIC,KAAM,aACjEqC,EAAmBC,IAAwBlD,EAAAA,EAAAA,WAAS,IACpDmD,EAAmBC,IAAwBpD,EAAAA,EAAAA,UAAS,KAGpDqD,EAAmBC,IAAwBtD,EAAAA,EAAAA,WAAS,KACzD,MAAMuD,EAAQC,aAAaC,QAAQ,qBACnC,OAAOF,EAAQG,KAAKC,MAAMJ,GAAS,EAAE,KAIhCK,EAAmBC,IAAwB7D,EAAAA,EAAAA,WAAS,KACzD,MAAMuD,EAAQC,aAAaC,QAAQ,qBACnC,OAAIF,EACKG,KAAKC,MAAMJ,GAEb,CAAEO,MAAM,IAAIC,MAAOC,cAAcC,MAAM,EAAG,IAAKC,UAAW,GAAI,KAIvE/D,EAAAA,EAAAA,YAAU,KACRqD,aAAaW,QAAQ,oBAAqBT,KAAKU,UAAUf,GAAmB,GAC3E,CAACA,KAGJlD,EAAAA,EAAAA,YAAU,KACRqD,aAAaW,QAAQ,oBAAqBT,KAAKU,UAAUR,GAAmB,GAC3E,CAACA,KAGJzD,EAAAA,EAAAA,YAAU,KACR,MAAMkE,GAAQ,IAAIN,MAAOC,cAAcC,MAAM,EAAG,IAChD,GAAIL,EAAkBE,OAASO,EAAO,CAEpCR,EAAqB,CAAEC,KAAMO,EAAOH,UAAW,KAG/C,MAAMI,EAAoBjB,EAAkBT,QAAO2B,IACjD,MAAMC,EAAUjD,EAAckD,MAAKC,GAAKA,EAAEjD,KAAO8C,IACjD,OAAOC,IAAYA,EAAQzC,KAAK,IAGlCuB,EAAqBgB,EACvB,IACC,CAACV,EAAkBE,KAAMT,KAG5BlD,EAAAA,EAAAA,YAAU,KAER,GAAIgD,EAAkBvD,OAAS,EAAG,CAChC,MAAM+E,EAASxB,EAAkByB,KAAInD,GAC5BV,YAAW,KAChBqC,GAAqByB,GAAQA,EAAKjC,QAAO2B,GAAaA,IAAc9C,KAAI,GACvE,OAIL,MAAO,KACLkD,EAAOG,SAAQhE,GAASE,aAAaF,IAAO,CAEhD,IACC,CAACqC,IAGJ,MAAM4B,GAAoBC,EAAAA,EAAAA,cAAY,KACpC,MAAMX,GAAQ,IAAIN,MAAOC,cAAcC,MAAM,EAAG,IAC1CgB,EAASzB,aAAaC,QAAQ,iBACpC,GAAIwB,EAAQ,CACV,MAAMC,EAAOxB,KAAKC,MAAMsB,GACxB,OAAOC,EAAKpB,OAASO,EAAQa,EAAKC,MAAQ,CAC5C,CACA,OAAO,CAAC,GACP,IAGGC,GAAqBJ,EAAAA,EAAAA,cAAaT,IAEtC,MACMC,EADc,IAAIjD,KAAkBC,GACdiD,MAAKC,GAAKA,EAAEjD,KAAO8C,IAE/C,OAAIC,GAAWA,EAAQzC,MACd6B,EAAkBM,UAAUmB,SAASd,GAGvClB,EAAkBgC,SAASd,EAAU,GAC3C,CAAClB,EAAmBO,IAGjB0B,GAAqBN,EAAAA,EAAAA,cAAaR,KAClCA,EAAQe,eAAiB9C,EAAQ+B,EAAQe,gBAK5C,CAAC9C,IAGE+C,GAAmBC,EAAAA,EAAAA,UAAQ,IAEX,IAAIlE,KAAkBC,GAEvBoB,QAAO4B,IAET,cAAX5B,GAA0B4B,EAAQ5D,OAASL,GAA2BiE,EAAQ5D,OAASL,MAG5E,SAAXqC,GAAqB4B,EAAQ5D,OAASL,GAAsBiE,EAAQ5D,OAASL,OAGlE,cAAXqC,IAA2BwC,EAAmBZ,EAAQ/C,SAG3C,cAAXmB,IAA2BwC,EAAmBZ,EAAQ/C,MAAQ6D,EAAmBd,QAMjFvB,GACAmC,EAAmBZ,EAAQ/C,KAChB,cAAXmB,IACCO,EAAkBkC,SAASb,EAAQ/C,WAMzC,CAACmB,EAAQH,EAAOY,EAAmBO,EAAmBX,EAAmBE,EAAmBiC,EAAoBE,IAc7GI,EAAY,SAAC/E,GACjBoC,EAAS,CAAEC,SAAS,EAAMrC,UAASC,KADLjB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,WAEnC,EAsEMgG,EAAgBnB,IACpB,GAAIA,EAAQ5D,OAASL,EAAyB,CAE5C,MAAMqF,EAAcpB,EAAQxC,OAAOG,OAAM,UAAAhB,OAAaqD,EAAQxC,OAAOG,QAAW,GAEhF,OACElB,EAAAA,EAAAA,MAAA,OAAKC,UAAS,mCAAAC,OAAqCyE,GAAcxE,SAAA,EAC/DH,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeE,SAAA,CAAEoD,EAAQ5C,OAAO,cAC/CX,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBE,SAAA,EAC/BH,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4BAA2BE,SAAA,EACxCC,EAAAA,EAAAA,KAAA,OACEwE,IAAKrB,EAAQxC,OAAOE,MACpB4D,IAAKtB,EAAQxC,OAAOC,KACpBf,UAAU,sBACV6E,QAAQ,SAETvB,EAAQxC,OAAOG,QAAUqC,EAAQxC,OAAOG,SAAW3B,IAClDa,EAAAA,EAAAA,KAAA,OAAKH,UAAS,gBAAAC,OAAkBqD,EAAQxC,OAAOG,QAASf,SACrDoD,EAAQxC,OAAOG,OAAO6D,oBAI7B3E,EAAAA,EAAAA,KAAA,QAAMH,UAAU,iBAAgBE,SAAEoD,EAAQxC,OAAOC,YAIzD,CAAO,OAAIuC,EAAQ5D,OAASL,GAExBU,EAAAA,EAAAA,MAAA,OAAKC,UAAU,6BAA4BE,SAAA,EACzCH,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeE,SAAA,CAAEoD,EAAQ5C,OAAO,iBAC/CP,EAAAA,EAAAA,KAAA,OAAKH,UAAU,YAAWE,SAAC,oBAGtBoD,EAAQ5D,OAASL,GAExBU,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gCAA+BE,SAAA,CAC3CoD,EAAQyB,QAAQC,QACfjF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaE,SAAA,EAC1BH,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeE,SAAA,CAAEoD,EAAQyB,QAAQC,MAAM,iBACtD7E,EAAAA,EAAAA,KAAA,OAAKH,UAAU,YAAWE,SAAC,oBAG9BoD,EAAQyB,QAAQE,YACflF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBE,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,OACEwE,IAAKrB,EAAQyB,QAAQE,UAAUjE,MAC/B4D,IAAKtB,EAAQyB,QAAQE,UAAUlE,KAC/Bf,UAAU,sBACV6E,QAAQ,UAEV1E,EAAAA,EAAAA,KAAA,QAAMH,UAAU,iBAAgBE,SAAEoD,EAAQyB,QAAQE,UAAUlE,kBAjB/D,CAsBP,EAIImE,EAAsB5B,GACtBA,EAAQ5D,OAASL,GACZc,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAeE,SAAC,kCAC7BoD,EAAQxC,QAAUwC,EAAQxC,OAAOG,SAAW3B,GAC9Ca,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gCAA+BE,SAAC,kDAC7CoD,EAAQxC,QAAUwC,EAAQxC,OAAOG,SAAW3B,GAC9Ca,EAAAA,EAAAA,KAAA,OAAKH,UAAU,2BAA0BE,SAAC,6CACxCoD,EAAQxC,QAAUwC,EAAQxC,OAAOG,SAAW3B,GAC9Ca,EAAAA,EAAAA,KAAA,OAAKH,UAAU,2BAA0BE,SAAC,iCAE5C,KAGT,OACEH,EAAAA,EAAAA,MAAA,OAAKC,UAAS,iBAAAC,OAAmBrB,EAAW,SAAW,IAAKsB,SAAA,EAC1DC,EAAAA,EAAAA,KAAA,MAAIH,UAAU,iBAAgBE,SAAC,eAG/BH,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBE,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,UACEH,UAAS,iBAAAC,OAA8B,QAAXyB,EAAmB,SAAW,IAC1DtB,QAASA,IAAMuB,EAAU,OAAOzB,SACjC,UAGDC,EAAAA,EAAAA,KAAA,UACEH,UAAS,iBAAAC,OAA8B,cAAXyB,EAAyB,SAAW,IAChEtB,QAASA,IAAMuB,EAAU,aAAazB,SACvC,gBAGDC,EAAAA,EAAAA,KAAA,UACEH,UAAS,iBAAAC,OAA8B,SAAXyB,EAAoB,SAAW,IAC3DtB,QAASA,IAAMuB,EAAU,QAAQzB,SAClC,eAGDC,EAAAA,EAAAA,KAAA,UACEH,UAAS,iBAAAC,OAA8B,cAAXyB,EAAyB,SAAW,IAChEtB,QAASA,IAAMuB,EAAU,aAAazB,SACvC,mBAGDC,EAAAA,EAAAA,KAAA,UACEH,UAAS,iBAAAC,OAA8B,cAAXyB,EAAyB,SAAW,IAChEtB,QAASA,IAAMuB,EAAU,aAAazB,SACvC,qBAMHC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,mBAAkBE,UAC/BH,EAAAA,EAAAA,MAAA,SAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAA,SACET,KAAK,WACLyF,QAASpD,EACTqD,SAAUA,IAAMpD,GAAsBD,KACtC,wDAMN5B,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAeE,SAC3BoE,EAAiBZ,KAAI,CAACJ,EAAS+B,KAAW,IAADC,EACxC,MAAMC,EAAcrB,EAAmBZ,EAAQ/C,IACzCiF,EAAcpB,EAAmBd,GACjCmC,EAjNd,SAAiCnC,GAC/B,GAAIA,EAAQzC,OAASyC,EAAQpC,gBAE3B,MAAO,CAAEwE,QADS7B,IACW8B,SAAUrC,EAAQpC,iBAGjD,OAAO,IACT,CA0MyB0E,CAAwBtC,GACnCuC,EAAsB5D,EAAkBkC,SAASb,EAAQ/C,IAGzDuF,EAAcP,GAAexD,IAAsB8D,GAAkC,cAAXnE,EAC5E,sBACA,GAGEgD,EAA4B,QAAdY,EAAAhC,EAAQxC,cAAM,IAAAwE,GAAdA,EAAgBrE,OAAM,UAAAhB,OAC5BqD,EAAQxC,OAAOG,QACzB,GAEJ,OACElB,EAAAA,EAAAA,MAAA,OAEEC,UAAS,kCAAAC,OACLsF,EAAc,YAAc,GAAE,uBAAAtF,OAC7BuF,EAA8B,GAAhB,cAAkB,uBAAAvF,OACjCqD,EAAQ5D,OAASL,EAAwB,kBAAoB,GAAE,sBAAAY,OAC/DyE,EAAW,sBAAAzE,OACX6F,EAAW,sBAAA7F,OACXqD,EAAQzC,MAAQ,gBAAkB,IACtCkF,MAAO,CACLC,cAAeT,GAAexD,IAAsB8D,GAAkC,cAAXnE,EACvE,UACA,OACJuE,kBAAmB,KACnBC,kBAAmB,YACnBhG,SAAA,CAEDgF,EAAmB5B,IAEpBvD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBE,SAAA,CAC5BoD,EAAQzC,QAASV,EAAAA,EAAAA,KAAA,QAAMH,UAAU,oBAAmBE,SAAC,gBACtDC,EAAAA,EAAAA,KAAA,QAAMH,UAAS,sBAAAC,OAAwBqD,EAAQ3C,WAAWwF,eAAgBjG,SACvEoD,EAAQ3C,iBAIbR,EAAAA,EAAAA,KAAA,MAAIH,UAAU,sBAAqBE,SAAEoD,EAAQ9C,eAE7CL,EAAAA,EAAAA,KAAA,KAAGH,UAAU,iBAAgBE,SAAEoD,EAAQ7C,uBAEvCV,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcE,SAAA,EAC3BH,EAAAA,EAAAA,MAAA,QAAMC,UAAU,eAAcE,SAAA,CAAC,gBAAIoD,EAAQ1C,iBAC1C0C,EAAQe,gBACPtE,EAAAA,EAAAA,MAAA,QAAMC,UAAS,iBAAAC,OAAmBsB,EAAQ+B,EAAQe,cAAgB,WAAa,IAAKnE,SAAA,CAAC,SAC5EoD,EAAQe,cAAc,sBAKlCI,EAAanB,GAEbmC,IACC1F,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBE,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,eAAcE,UAC3BC,EAAAA,EAAAA,KAAA,OACEH,UAAU,gBACV+F,MAAO,CAAEK,MAAM,GAADnG,OAAKoG,KAAKC,IAAI,IAAMb,EAASC,QAAUD,EAASE,SAAY,KAAI,WAGlF5F,EAAAA,EAAAA,MAAA,QAAMC,UAAU,gBAAeE,SAAA,CAC5BuF,EAASC,QAAQ,IAAED,EAASE,SAAS,iBAK5CxF,EAAAA,EAAAA,KAAA,UACEH,UAAS,kBAAAC,OAAoBsF,EAAc,YAAc,GAAE,KAAAtF,OAAIqD,EAAQ5D,OAASL,EAAwB,iBAAmB,IAC3He,QAASA,IApQCkD,KAEtB,IAAIY,EAAmBZ,EAAQ/C,IAG/B,GAAI+C,EAAQe,eAAiB9C,EAAQ+B,EAAQe,cAC3CG,EAAU,kBAADvE,OAAmBqD,EAAQe,cAAa,gDAA6C,aADhG,CAMA,GAAIf,EAAQzC,OAASyC,EAAQpC,gBAAiB,CAC5C,MAAMqF,EAAY1C,IAClB,GAAI0C,EAAYjD,EAAQpC,gBAEtB,YADAsD,EAAU,6BAADvE,OAA8BqD,EAAQpC,gBAAe,oCAAAjB,OAAgCsG,GAAa,UAG/G,CAGA,GAAIjD,EAAQ5D,OAASL,EAAyB,CAC5C+B,EAAgBkC,EAAQ5C,QACxBW,EAAgBiC,EAAQxC,QAExB,IAAI0F,EAAa,GACblD,EAAQxC,OAAOG,SAAW3B,EAC5BkH,EAAa,QACJlD,EAAQxC,OAAOG,SAAW3B,EACnCkH,EAAa,QACJlD,EAAQxC,OAAOG,SAAW3B,IACnCkH,EAAa,cAEfhC,EAAU,GAADvE,OAAIuG,EAAU,KAAAvG,OAAIqD,EAAQxC,OAAOC,KAAI,wBAAAd,OAAuBqD,EAAQ5C,OAAM,qBAAqB,UAC1G,MAAW4C,EAAQ5D,OAASL,GAC1BiC,EAASgC,EAAQ5C,QACjB8D,EAAU,0BAADvE,OAA2BqD,EAAQ5C,OAAM,wBAAqB,YAC9D4C,EAAQ5D,OAASL,IAEtBiE,EAAQyB,QAAQC,OAClB1D,EAASgC,EAAQyB,QAAQC,OAEvB1B,EAAQyB,QAAQE,WAClB5D,EAAgBiC,EAAQyB,QAAQE,WAElCT,EAAU,8BAADvE,OAA+BqD,EAAQyB,QAAQE,UAAY3B,EAAQyB,QAAQE,UAAUlE,KAAO,kBAAoB,GAAE,KAAAd,OAAIqD,EAAQyB,QAAQC,MAAQ,OAAS1B,EAAQyB,QAAQC,MAAQ,aAAY,GAAE,cAAc,YAIlN1B,EAAQzC,MACV8B,GAAqBgB,IAAI8C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACpB9C,GAAI,IACPX,UAAW,IAAIW,EAAKX,UAAWM,EAAQ/C,QAGzC6B,GAAqBuB,GAAQ,IAAIA,EAAML,EAAQ/C,MAIjD2B,GAAqByB,GAAQ,IAAIA,EAAML,EAAQ/C,KAlD/C,CAkDmD,EA0MxBmG,CAAepD,GAC9BqD,SAAUpB,IAAgBC,EAAYtF,SAErCqF,EAAc,gBAAkB,qBA3D9BjC,EAAQ/C,GA6DT,MAMiB,IAA5B+D,EAAiB5F,SAChByB,EAAAA,EAAAA,KAAA,OAAKH,UAAU,sBAAqBE,SAAC,sEAMtC0B,EAAME,UACL3B,EAAAA,EAAAA,KAACZ,EAAK,CACJE,QAASmC,EAAMnC,QACfC,KAAMkC,EAAMlC,KACZC,QA/RWiH,KACjB/E,GAAQ4E,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAI7E,GAAK,IAAEE,SAAS,IAAQ,MAmS1C,C","sources":["hooks/useIsMobile.js","pages/Missions.js"],"sourcesContent":["// src/hooks/useIsMobile.js\nimport { useState, useEffect } from 'react';\n\nfunction useIsMobile(breakpoint = 768) {\n  const [isMobile, setIsMobile] = useState(() => window.innerWidth < breakpoint);\n\n  useEffect(() => {\n    const handleResize = () => {\n      setIsMobile(window.innerWidth < breakpoint);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup beim Unmount\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [breakpoint]);\n\n  return isMobile;\n}\n\nexport default useIsMobile;\n","import React, { useState, useEffect, useContext, useMemo, useCallback } from 'react';\nimport { UserContext } from '../context/UserContext';\nimport useIsMobile from '../hooks/useIsMobile';\n\n// Konstanten für Mission-Typen\nconst MISSION_TYPES = {\n  CHARACTER: 'character',\n  COIN: 'coin',\n  SPECIAL: 'special' // Für Missionen mit mehreren Belohnungen\n};\n\n// Konstanten für Seltenheitsstufen\nconst RARITY = {\n  COMMON: 'common',\n  UNCOMMON: 'uncommon',\n  RARE: 'rare',\n  EPIC: 'epic',\n  LEGENDARY: 'legendary'\n};\n\n// Toast Benachrichtigungskomponente\nconst Toast = ({ message, type, onClose }) => {\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      onClose();\n    }, 5000);\n    \n    return () => clearTimeout(timer);\n  }, [onClose]);\n  \n  return (\n    <div className={`mission-toast ${type}`}>\n      <div className=\"mission-toast-content\">{message}</div>\n      <button className=\"mission-toast-close\" onClick={onClose}>×</button>\n    </div>\n  );\n};\n\n// Definiere die MISSIONS_DATA Variable - Du musst sie durch deine eigene ersetzen!\n// Dies ist nur ein Platzhalter, um den ESLint-Fehler zu beheben\nconst MISSIONS_DATA = [];\n\n// Füge diese täglichen Missionen zu deiner bestehenden MISSIONS_DATA hinzu\nconst DAILY_CHARACTER_MISSIONS = [\n  {\n    id: 101,\n    description: 'DAILY: Rescue Pickle Rick from the sewer rats!',\n    detailedDescription: 'Rick turned himself into a pickle to avoid family therapy, but now he\\'s in danger. Help him fight off the sewer rats and get him back home!',\n    reward: 120,\n    type: MISSION_TYPES.CHARACTER,\n    difficulty: 'Medium',\n    estimatedTime: '20 min',\n    daily: true,\n    unlock: {\n      id: 265,\n      name: 'Pickle Rick',\n      image: 'https://rickandmortyapi.com/api/character/avatar/265.jpeg',\n      rarity: RARITY.RARE\n    }\n  },\n  {\n    id: 102,\n    description: 'DAILY: Free Mr. Meeseeks from the box!',\n    detailedDescription: 'Mr. Meeseeks has been trapped in his box for too long. Free him and complete his task quickly before he goes insane!',\n    reward: 200,\n    type: MISSION_TYPES.CHARACTER,\n    difficulty: 'Medium',\n    estimatedTime: '20 min',\n    daily: true,\n    unlock: {\n      id: 242,\n      name: 'Mr. Meeseeks',\n      image: 'https://rickandmortyapi.com/api/character/avatar/242.jpeg',\n      rarity: RARITY.UNCOMMON\n    }\n  },\n  {\n    id: 103,\n    description: 'DAILY RARE: Break Scary Terry out of dream prison!',\n    detailedDescription: 'Scary Terry, bitch! He\\'s been imprisoned in a dream realm by the Dream Police. Navigate the nightmare landscape and help him escape!',\n    reward: 180,\n    type: MISSION_TYPES.CHARACTER,\n    difficulty: 'Hard',\n    estimatedTime: '25 min',\n    daily: true,\n    requiredQuizzes: 3,\n    unlock: {\n      id: 333,\n      name: 'Scary Terry',\n      image: 'https://rickandmortyapi.com/api/character/avatar/333.jpeg',\n      rarity: RARITY.RARE\n    }\n  },\n  {\n    id: 104,\n    description: 'DAILY EPIC: Free Birdperson from the Federation\\'s mind control!',\n    detailedDescription: 'Birdperson has been captured and brainwashed by the Galactic Federation. Infiltrate their headquarters and restore his memories!',\n    reward: 280,\n    type: MISSION_TYPES.CHARACTER,\n    difficulty: 'Very Hard',\n    estimatedTime: '40 min',\n    daily: true,\n    requiredQuizzes: 5,\n    unlock: {\n      id: 47,\n      name: 'Birdperson',\n      image: 'https://rickandmortyapi.com/api/character/avatar/47.jpeg',\n      rarity: RARITY.EPIC\n    }\n  },\n  {\n    id: 105,\n    description: 'DAILY LEGENDARY: Assist Unity in escaping the hivemind!',\n    detailedDescription: 'Unity, Rick\\'s ex-lover, wants to break free from her hivemind existence. Help her regain her individuality in this challenging mission.',\n    reward: 350,\n    type: MISSION_TYPES.CHARACTER,\n    difficulty: 'Extreme',\n    estimatedTime: '45 min',\n    daily: true,\n    requiredQuizzes: 7,\n    unlock: {\n      id: 411,\n      name: 'Unity',\n      image: 'https://rickandmortyapi.com/api/character/avatar/411.jpeg',\n      rarity: RARITY.LEGENDARY\n    }\n  }\n];\n\nfunction Missions() {\n  const isMobile = useIsMobile();\n  const { completeMission, unlockCharacter, addCoins, level } = useContext(UserContext);\n  const [filter, setFilter] = useState('all');\n  const [toast, setToast] = useState({ visible: false, message: '', type: 'success' });\n  const [autoHideCompleted, setAutoHideCompleted] = useState(true);\n  const [recentlyCompleted, setRecentlyCompleted] = useState([]);\n  \n  // Lade abgeschlossene Missionen aus dem lokalen Speicher\n  const [completedMissions, setCompletedMissions] = useState(() => {\n    const saved = localStorage.getItem('completedMissions');\n    return saved ? JSON.parse(saved) : [];\n  });\n\n  // Lade tägliche Missionsdaten aus dem lokalen Speicher\n  const [dailyMissionsData, setDailyMissionsData] = useState(() => {\n    const saved = localStorage.getItem('dailyMissionsData');\n    if (saved) {\n      return JSON.parse(saved);\n    }\n    return { date: new Date().toISOString().slice(0, 10), completed: [] };\n  });\n\n  // Speichere abgeschlossene Missionen im lokalen Speicher\n  useEffect(() => {\n    localStorage.setItem('completedMissions', JSON.stringify(completedMissions));\n  }, [completedMissions]);\n\n  // Speichere tägliche Missionsdaten im lokalen Speicher\n  useEffect(() => {\n    localStorage.setItem('dailyMissionsData', JSON.stringify(dailyMissionsData));\n  }, [dailyMissionsData]);\n\n  // Überprüfe, ob ein neuer Tag begonnen hat, um tägliche Missionen zurückzusetzen\n  useEffect(() => {\n    const today = new Date().toISOString().slice(0, 10);\n    if (dailyMissionsData.date !== today) {\n      // Reset tägliche Missionen, wenn ein neuer Tag beginnt\n      setDailyMissionsData({ date: today, completed: [] });\n      \n      // Entferne tägliche Missionen aus der Liste der abgeschlossenen Missionen\n      const permanentMissions = completedMissions.filter(missionId => {\n        const mission = MISSIONS_DATA.find(m => m.id === missionId);\n        return mission && !mission.daily;\n      });\n      \n      setCompletedMissions(permanentMissions);\n    }\n  }, [dailyMissionsData.date, completedMissions]);\n\n  // Setze Timer für kürzlich abgeschlossene Missionen\n  useEffect(() => {\n    // Nach 5 Sekunden, entferne die Mission aus der \"kürzlich abgeschlossen\" Liste\n    if (recentlyCompleted.length > 0) {\n      const timers = recentlyCompleted.map(id => {\n        return setTimeout(() => {\n          setRecentlyCompleted(prev => prev.filter(missionId => missionId !== id));\n        }, 5000);\n      });\n      \n      // Cleanup-Funktion um Timer zu löschen\n      return () => {\n        timers.forEach(timer => clearTimeout(timer));\n      };\n    }\n  }, [recentlyCompleted]);\n\n  // Hilfsfunktion: Liest den heutigen Quiz-Zähler aus dem lokalen Speicher\n  const getDailyQuizCount = useCallback(() => {\n    const today = new Date().toISOString().slice(0, 10);\n    const stored = localStorage.getItem('dailyQuizData');\n    if (stored) {\n      const data = JSON.parse(stored);\n      return data.date === today ? data.count : 0;\n    }\n    return 0;\n  }, []);\n\n  // Überprüft, ob eine Mission abgeschlossen ist\n  const isMissionCompleted = useCallback((missionId) => {\n    // Kombiniere die Arrays für die Suche\n    const allMissions = [...MISSIONS_DATA, ...DAILY_CHARACTER_MISSIONS];\n    const mission = allMissions.find(m => m.id === missionId);\n\n    if (mission && mission.daily) {\n      return dailyMissionsData.completed.includes(missionId);\n    }\n\n    return completedMissions.includes(missionId);\n  }, [completedMissions, dailyMissionsData]);\n\n  // Überprüft, ob eine Mission verfügbar ist (Level-Anforderungen erfüllt)\n  const isMissionAvailable = useCallback((mission) => {\n    if (mission.requiredLevel && level < mission.requiredLevel) {\n      return false;\n    }\n\n    return true;\n  }, [level]);\n\n  // Filtere Missionen basierend auf der aktuellen Filterauswahl\n  const filteredMissions = useMemo(() => {\n    // Kombiniere die Standard- und täglichen Missionen\n    const allMissions = [...MISSIONS_DATA, ...DAILY_CHARACTER_MISSIONS];\n\n    return allMissions.filter(mission => {\n      // Prüfe, ob die Mission dem ausgewählten Filter entspricht\n      if (filter === 'character' && mission.type !== MISSION_TYPES.CHARACTER && mission.type !== MISSION_TYPES.SPECIAL) {\n        return false;\n      }\n      if (filter === 'coin' && mission.type !== MISSION_TYPES.COIN && mission.type !== MISSION_TYPES.SPECIAL) {\n        return false;\n      }\n      if (filter === 'completed' && !isMissionCompleted(mission.id)) {\n        return false;\n      }\n      if (filter === 'available' && (isMissionCompleted(mission.id) || !isMissionAvailable(mission))) {\n        return false;\n      }\n\n      // Wenn \"auto-hide\" aktiviert ist, verstecke abgeschlossene Missionen,\n      // außer sie sind kürzlich abgeschlossen oder \"Abgeschlossen\"-Filter ist aktiv\n      if (autoHideCompleted &&\n          isMissionCompleted(mission.id) &&\n          filter !== 'completed' &&\n          !recentlyCompleted.includes(mission.id)) {\n        return false;\n      }\n\n      return true;\n    });\n  }, [filter, level, completedMissions, dailyMissionsData, autoHideCompleted, recentlyCompleted, isMissionCompleted, isMissionAvailable]);\n\n\n  // Überprüft den Fortschritt einer Daily-Mission mit Quiz-Anforderungen\n  function getDailyMissionProgress(mission) {\n    if (mission.daily && mission.requiredQuizzes) {\n      const quizCount = getDailyQuizCount();\n      return { current: quizCount, required: mission.requiredQuizzes };\n    }\n    \n    return null;\n  }\n\n  // Zeigt eine Toast-Benachrichtigung an\n  const showToast = (message, type = 'success') => {\n    setToast({ visible: true, message, type });\n  };\n\n  // Schließt die Toast-Benachrichtigung\n  const closeToast = () => {\n    setToast({ ...toast, visible: false });\n  };\n\n  // Behandelt das Abschließen einer Mission\n  const handleComplete = (mission) => {\n    // Überprüfe, ob die Mission bereits abgeschlossen ist\n    if (isMissionCompleted(mission.id)) return;\n    \n    // Überprüfe Level-Anforderungen\n    if (mission.requiredLevel && level < mission.requiredLevel) {\n      showToast(`Du musst Level ${mission.requiredLevel} erreichen, um diese Mission zu erfüllen!`, 'error');\n      return;\n    }\n    \n    // Für tägliche Missionen mit Quiz-Anforderungen\n    if (mission.daily && mission.requiredQuizzes) {\n      const quizCount = getDailyQuizCount();\n      if (quizCount < mission.requiredQuizzes) {\n        showToast(`Du musst heute mindestens ${mission.requiredQuizzes} Quizze abschließen. Bisher: ${quizCount}`, 'warning');\n        return;\n      }\n    }\n    \n    // Belohnungen basierend auf dem Missionstyp vergeben\n    if (mission.type === MISSION_TYPES.CHARACTER) {\n      completeMission(mission.reward);\n      unlockCharacter(mission.unlock);\n      // Rarität-spezifische Nachricht\n      let rarityText = \"\";\n      if (mission.unlock.rarity === RARITY.RARE) {\n        rarityText = \" RARE\";\n      } else if (mission.unlock.rarity === RARITY.EPIC) {\n        rarityText = \" EPIC\";\n      } else if (mission.unlock.rarity === RARITY.LEGENDARY) {\n        rarityText = \" LEGENDARY\";\n      }\n      showToast(`${rarityText} ${mission.unlock.name} freigeschaltet und ${mission.reward} Punkte erhalten!`, 'success');\n    } else if (mission.type === MISSION_TYPES.COIN) {\n      addCoins(mission.reward);\n      showToast(`Mission abgeschlossen! ${mission.reward} Münzen erhalten!`, 'success');\n    } else if (mission.type === MISSION_TYPES.SPECIAL) {\n      // Spezielle Missionen mit mehreren Belohnungen\n      if (mission.rewards.coins) {\n        addCoins(mission.rewards.coins);\n      }\n      if (mission.rewards.character) {\n        unlockCharacter(mission.rewards.character);\n      }\n      showToast(`SPECIAL MISSION COMPLETED! ${mission.rewards.character ? mission.rewards.character.name + ' freigeschaltet' : ''} ${mission.rewards.coins ? 'und ' + mission.rewards.coins + ' Münzen' : ''} erhalten!`, 'success');\n    }\n    \n    // Markiere die Mission als abgeschlossen\n    if (mission.daily) {\n      setDailyMissionsData(prev => ({\n        ...prev,\n        completed: [...prev.completed, mission.id]\n      }));\n    } else {\n      setCompletedMissions(prev => [...prev, mission.id]);\n    }\n    \n    // Markiere diese Mission als kürzlich abgeschlossen\n    setRecentlyCompleted(prev => [...prev, mission.id]);\n  };\n\n  // Rendert einen Belohnungsindikator basierend auf dem Missionstyp\n  const renderReward = (mission) => {\n    if (mission.type === MISSION_TYPES.CHARACTER) {\n      // Bestimme Stil basierend auf der Seltenheit\n      const rarityClass = mission.unlock.rarity ? `rarity-${mission.unlock.rarity}` : '';\n      \n      return (\n        <div className={`mission-reward character-reward ${rarityClass}`}>\n          <div className=\"reward-amount\">{mission.reward} Punkte</div>\n          <div className=\"character-unlock\">\n            <div className=\"character-image-container\">\n              <img \n                src={mission.unlock.image} \n                alt={mission.unlock.name} \n                className=\"character-thumbnail\" \n                loading=\"lazy\" \n              />\n              {mission.unlock.rarity && mission.unlock.rarity !== RARITY.COMMON && (\n                <div className={`rarity-badge ${mission.unlock.rarity}`}>\n                  {mission.unlock.rarity.toUpperCase()}\n                </div>\n              )}\n            </div>\n            <span className=\"character-name\">{mission.unlock.name}</span>\n          </div>\n        </div>\n      );\n    } else if (mission.type === MISSION_TYPES.COIN) {\n      return (\n        <div className=\"mission-reward coin-reward\">\n          <div className=\"reward-amount\">{mission.reward} Münzen</div>\n          <div className=\"coin-icon\">💰</div>\n        </div>\n      );\n    } else if (mission.type === MISSION_TYPES.SPECIAL) {\n      return (\n        <div className=\"mission-reward special-reward\">\n          {mission.rewards.coins && (\n            <div className=\"coin-reward\">\n              <div className=\"reward-amount\">{mission.rewards.coins} Münzen</div>\n              <div className=\"coin-icon\">💰</div>\n            </div>\n          )}\n          {mission.rewards.character && (\n            <div className=\"character-unlock\">\n              <img \n                src={mission.rewards.character.image} \n                alt={mission.rewards.character.name} \n                className=\"character-thumbnail\" \n                loading=\"lazy\" \n              />\n              <span className=\"character-name\">{mission.rewards.character.name}</span>\n            </div>\n          )}\n        </div>\n      );\n    }\n  };\n  \n  // Rendert einen Badge für spezielle Missionen\n  const renderSpecialBadge = (mission) => {\n    if (mission.type === MISSION_TYPES.SPECIAL) {\n      return <div className=\"special-badge\">⭐ SPECIAL MISSION ⭐</div>;\n    } else if (mission.unlock && mission.unlock.rarity === RARITY.LEGENDARY) {\n      return <div className=\"special-badge legendary-badge\">🔥 LEGENDARY CHARACTER 🔥</div>;\n    } else if (mission.unlock && mission.unlock.rarity === RARITY.EPIC) {\n      return <div className=\"special-badge epic-badge\">💫 EPIC CHARACTER 💫</div>;\n    } else if (mission.unlock && mission.unlock.rarity === RARITY.RARE) {\n      return <div className=\"special-badge rare-badge\">✨ RARE CHARACTER ✨</div>;\n    }\n    return null;\n  };\n\n  return (\n    <div className={`missions-page ${isMobile ? 'mobile' : ''}`}>\n      <h1 className=\"missions-title\">Missionen</h1>\n      \n      {/* Filter-Leiste */}\n      <div className=\"mission-filters\">\n        <button \n          className={`filter-button ${filter === 'all' ? 'active' : ''}`}\n          onClick={() => setFilter('all')}\n        >\n          Alle\n        </button>\n        <button \n          className={`filter-button ${filter === 'character' ? 'active' : ''}`}\n          onClick={() => setFilter('character')}\n        >\n          Charaktere\n        </button>\n        <button \n          className={`filter-button ${filter === 'coin' ? 'active' : ''}`}\n          onClick={() => setFilter('coin')}\n        >\n          Münzen\n        </button>\n        <button \n          className={`filter-button ${filter === 'completed' ? 'active' : ''}`}\n          onClick={() => setFilter('completed')}\n        >\n          Abgeschlossen\n        </button>\n        <button \n          className={`filter-button ${filter === 'available' ? 'active' : ''}`}\n          onClick={() => setFilter('available')}\n        >\n          Verfügbar\n        </button>\n      </div>\n      \n      {/* Auto-Hide Schalter */}\n      <div className=\"auto-hide-toggle\">\n        <label>\n          <input \n            type=\"checkbox\" \n            checked={autoHideCompleted} \n            onChange={() => setAutoHideCompleted(!autoHideCompleted)} \n          />\n          Abgeschlossene Missionen automatisch ausblenden\n        </label>\n      </div>\n      \n      {/* Missions-Grid */}\n      <div className=\"missions-grid\">\n        {filteredMissions.map((mission, index) => {\n          const isCompleted = isMissionCompleted(mission.id);\n          const isAvailable = isMissionAvailable(mission);\n          const progress = getDailyMissionProgress(mission);\n          const isRecentlyCompleted = recentlyCompleted.includes(mission.id);\n          \n          // CSS-Klassen für Animation\n          const fadeClasses = isCompleted && autoHideCompleted && !isRecentlyCompleted && filter !== 'completed' \n            ? 'mission-card-fading' \n            : '';\n            \n          // Spezielle Klassen für Seltenheit\n          const rarityClass = mission.unlock?.rarity \n            ? `rarity-${mission.unlock.rarity}` \n            : '';\n          \n          return (\n            <div \n              key={mission.id} \n              className={`mission-card \n                ${isCompleted ? 'completed' : ''} \n                ${!isAvailable ? 'unavailable' : ''} \n                ${mission.type === MISSION_TYPES.SPECIAL ? 'special-mission' : ''}\n                ${rarityClass}\n                ${fadeClasses}\n                ${mission.daily ? 'daily-mission' : ''}`}\n              style={{\n                animationName: isCompleted && autoHideCompleted && !isRecentlyCompleted && filter !== 'completed' \n                  ? 'fadeOut' \n                  : 'none',\n                animationDuration: '5s',\n                animationFillMode: 'forwards'\n              }}\n            >\n              {renderSpecialBadge(mission)}\n              \n              <div className=\"mission-header\">\n                {mission.daily && <span className=\"mission-tag daily\">Täglich</span>}\n                <span className={`mission-difficulty ${mission.difficulty.toLowerCase()}`}>\n                  {mission.difficulty}\n                </span>\n              </div>\n              \n              <h3 className=\"mission-description\">{mission.description}</h3>\n              \n              <p className=\"mission-detail\">{mission.detailedDescription}</p>\n              \n              <div className=\"mission-meta\">\n                <span className=\"mission-time\">⏱️ {mission.estimatedTime}</span>\n                {mission.requiredLevel && (\n                  <span className={`mission-level ${level < mission.requiredLevel ? 'required' : ''}`}>\n                    Level {mission.requiredLevel}+ benötigt\n                  </span>\n                )}\n              </div>\n              \n              {renderReward(mission)}\n              \n              {progress && (\n                <div className=\"mission-progress\">\n                  <div className=\"progress-bar\">\n                    <div \n                      className=\"progress-fill\" \n                      style={{ width: `${Math.min(100, (progress.current / progress.required) * 100)}%` }}\n                    ></div>\n                  </div>\n                  <span className=\"progress-text\">\n                    {progress.current}/{progress.required} Quizze\n                  </span>\n                </div>\n              )}\n              \n              <button \n                className={`mission-button ${isCompleted ? 'completed' : ''} ${mission.type === MISSION_TYPES.SPECIAL ? 'special-button' : ''}`}\n                onClick={() => handleComplete(mission)}\n                disabled={isCompleted || !isAvailable}\n              >\n                {isCompleted ? 'Abgeschlossen' : 'Abschließen'}\n              </button>\n            </div>\n          );\n        })}\n      </div>\n      \n      {/* Leere Mitteilung, wenn keine Missionen dem Filter entsprechen */}\n      {filteredMissions.length === 0 && (\n        <div className=\"no-missions-message\">\n          Keine Missionen gefunden, die deinen Filterkriterien entsprechen.\n        </div>\n      )}\n      \n      {/* Toast-Benachrichtigung */}\n      {toast.visible && (\n        <Toast \n          message={toast.message} \n          type={toast.type} \n          onClose={closeToast} \n        />\n      )}\n    </div>\n  );\n}\n\nexport default Missions;\n"],"names":["breakpoint","arguments","length","undefined","isMobile","setIsMobile","useState","window","innerWidth","useEffect","handleResize","addEventListener","removeEventListener","MISSION_TYPES","RARITY","Toast","_ref","message","type","onClose","timer","setTimeout","clearTimeout","_jsxs","className","concat","children","_jsx","onClick","MISSIONS_DATA","DAILY_CHARACTER_MISSIONS","id","description","detailedDescription","reward","difficulty","estimatedTime","daily","unlock","name","image","rarity","requiredQuizzes","useIsMobile","completeMission","unlockCharacter","addCoins","level","useContext","UserContext","filter","setFilter","toast","setToast","visible","autoHideCompleted","setAutoHideCompleted","recentlyCompleted","setRecentlyCompleted","completedMissions","setCompletedMissions","saved","localStorage","getItem","JSON","parse","dailyMissionsData","setDailyMissionsData","date","Date","toISOString","slice","completed","setItem","stringify","today","permanentMissions","missionId","mission","find","m","timers","map","prev","forEach","getDailyQuizCount","useCallback","stored","data","count","isMissionCompleted","includes","isMissionAvailable","requiredLevel","filteredMissions","useMemo","showToast","renderReward","rarityClass","src","alt","loading","toUpperCase","rewards","coins","character","renderSpecialBadge","checked","onChange","index","_mission$unlock","isCompleted","isAvailable","progress","current","required","getDailyMissionProgress","isRecentlyCompleted","fadeClasses","style","animationName","animationDuration","animationFillMode","toLowerCase","width","Math","min","quizCount","rarityText","_objectSpread","handleComplete","disabled","closeToast"],"sourceRoot":""}