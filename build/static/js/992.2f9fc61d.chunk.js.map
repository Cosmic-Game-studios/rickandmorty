{"version":3,"file":"static/js/992.2f9fc61d.chunk.js","mappings":"4MAIA,SAASA,EAAaC,GAA2B,IAA1B,UAAEC,EAAS,SAAEC,GAAUF,EAC5C,MAAM,MAAEG,EAAK,gBAAEC,EAAe,mBAAEC,IAAuBC,EAAAA,EAAAA,YAAWC,EAAAA,IAI5DC,EAAeH,EAAmBI,MAAKC,GAAKA,EAAEC,KAAOV,EAAUU,KAC/DC,EAAgBV,GAAYM,GAAYK,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQZ,GAAcO,GAAiBP,GAE/E,cACJa,EAAgB,EAAC,UACjBC,EAAY,EAAC,eACbC,EAAiB,EAAC,OAClBC,EAAM,MACNC,EAAK,KACLC,GACEP,EAEEQ,EAAejB,GAASW,GAG9BO,EAAAA,EAAAA,YAAU,KACJD,IAAiBlB,GACnBE,EAAgBH,EAClB,GACC,CAACmB,EAAclB,EAAUD,EAAWG,IAGvC,MAAMkB,GAAiBC,EAAAA,EAAAA,UAAQ,IAGtBR,EAFqC,IAAtBC,EAAiB,IACnBC,EAAwB,IAAdA,EAAS,GAAW,IAEjD,CAACF,EAAWC,EAAgBC,IAE/B,OACEO,EAAAA,EAAAA,MAAA,OAAKC,UAAS,kBAAAC,OAAoBN,GAAgBlB,EAAW,WAAa,UAAWyB,SAAA,EACnFC,EAAAA,EAAAA,KAAA,OAAKC,IAAKX,EAAOY,IAAKX,EAAMY,QAAQ,UACpCH,EAAAA,EAAAA,KAAA,MAAAD,SAAKR,IACJC,GAAgBlB,GACfsB,EAAAA,EAAAA,MAAAQ,EAAAA,SAAA,CAAAL,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,cACHH,EAAAA,EAAAA,MAAA,KAAAG,SAAA,CAAG,UAAQL,EAAeW,QAAQ,OAClCT,EAAAA,EAAAA,MAAA,KAAAG,SAAA,CAAG,gBAAoBO,IAAXjB,EAAuBA,EAAS,uBAG9CO,EAAAA,EAAAA,MAAA,KAAGC,UAAU,iBAAgBE,SAAA,CAAC,mBAAiBb,OAIvD,CAeA,QAAeqB,EAAAA,KAAWpC,E","sources":["components/CharacterCard.js"],"sourcesContent":["import React, { useContext, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { UserContext } from '../context/UserContext';\n\nfunction CharacterCard({ character, unlocked }) {\n  const { level, unlockCharacter, unlockedCharacters } = useContext(UserContext);\n  \n  // Falls der Charakter freigeschaltet ist, überschreibe die übergebenen Werte\n  // mit den aktualisierten Werten aus unlockedCharacters\n  const unlockedData = unlockedCharacters.find(c => c.id === character.id);\n  const characterData = unlocked && unlockedData ? { ...character, ...unlockedData } : character;\n  \n  const {\n    requiredLevel = 2,\n    baseSpeed = 1,\n    characterLevel = 1,\n    rarity,\n    image,\n    name,\n  } = characterData;\n\n  const autoUnlocked = level >= requiredLevel;\n\n  // Automatisches Freischalten, wenn der User-Level erreicht ist\n  useEffect(() => {\n    if (autoUnlocked && !unlocked) {\n      unlockCharacter(character);\n    }\n  }, [autoUnlocked, unlocked, character, unlockCharacter]);\n\n  // Berechne die effektive Geschwindigkeit basierend auf baseSpeed, Level-Bonus und rarity-Bonus\n  const effectiveSpeed = useMemo(() => {\n    const upgradeBonus = (characterLevel - 1) * 0.5;\n    const rarityBonus = rarity ? (rarity - 1) * 0.5 : 0;\n    return baseSpeed + upgradeBonus + rarityBonus;\n  }, [baseSpeed, characterLevel, rarity]);\n\n  return (\n    <div className={`character-card ${autoUnlocked || unlocked ? 'unlocked' : 'locked'}`}>\n      <img src={image} alt={name} loading=\"lazy\" />\n      <h3>{name}</h3>\n      {autoUnlocked || unlocked ? (\n        <>\n          <p>Unlocked</p>\n          <p>Speed: {effectiveSpeed.toFixed(2)}</p>\n          <p>Rarity: {rarity !== undefined ? rarity : 'Not specified'}</p>\n        </>\n      ) : (\n        <p className=\"required-level\">Required level: {requiredLevel}</p>\n      )}\n    </div>\n  );\n}\n\nCharacterCard.propTypes = {\n  character: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    requiredLevel: PropTypes.number,\n    baseSpeed: PropTypes.number,\n    characterLevel: PropTypes.number,\n    rarity: PropTypes.number\n  }).isRequired,\n  unlocked: PropTypes.bool\n};\n\nexport default React.memo(CharacterCard);\n"],"names":["CharacterCard","_ref","character","unlocked","level","unlockCharacter","unlockedCharacters","useContext","UserContext","unlockedData","find","c","id","characterData","_objectSpread","requiredLevel","baseSpeed","characterLevel","rarity","image","name","autoUnlocked","useEffect","effectiveSpeed","useMemo","_jsxs","className","concat","children","_jsx","src","alt","loading","_Fragment","toFixed","undefined","React"],"sourceRoot":""}