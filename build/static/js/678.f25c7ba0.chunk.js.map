{"version":3,"file":"static/js/678.f25c7ba0.chunk.js","mappings":"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","sources":["hooks/useIsMobile.js","pages/Quiz.js"],"sourcesContent":["// src/hooks/useIsMobile.js\nimport { useState, useEffect } from 'react';\n\nfunction useIsMobile(breakpoint = 768) {\n  const [isMobile, setIsMobile] = useState(() => window.innerWidth < breakpoint);\n\n  useEffect(() => {\n    const handleResize = () => {\n      setIsMobile(window.innerWidth < breakpoint);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup beim Unmount\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [breakpoint]);\n\n  return isMobile;\n}\n\nexport default useIsMobile;\n","import React, { useState, useEffect, useContext, useMemo } from 'react';\nimport { UserContext } from '../context/UserContext';\nimport useIsMobile from '../hooks/useIsMobile';\n\n// Helper function: Shuffle an array (Fisher-Yates Shuffle)\nfunction shuffleArray(array) {\n  const newArr = [...array];\n  for (let i = newArr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n  }\n  return newArr;\n}\n\n// Helper function: Determine question difficulty based on ID\nfunction determineQuestionDifficulty(question) {\n  const id = question.id;\n  \n  if (id <= 100) return \"easy\"; \n  if (id <= 150) return \"medium\"; \n  if (id <= 200) return \"hard\"; \n  if (id <= 300) return \"very-hard\"; \n  return \"extreme\";\n}\n\nfunction Quiz() {\n  const { completeMission } = useContext(UserContext);\n  const isMobile = useIsMobile();\n\n  // State for language selection: \"en\" or \"de\"\n  const [language, setLanguage] = useState(() => {\n    // Try to get language preference from localStorage\n    const saved = localStorage.getItem('quizLanguage');\n    return saved || \"de\"; // Default to German if not set\n  });\n\n  // Quiz states\n  const [allQuestions, setAllQuestions] = useState([]);\n  const [quizQuestions, setQuizQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selected, setSelected] = useState('');\n  const [score, setScore] = useState(0);\n  const [quizCompleted, setQuizCompleted] = useState(false);\n  const [feedback, setFeedback] = useState('');\n  const [showCorrectAnswer, setShowCorrectAnswer] = useState(false);\n  const [isAnswerCorrect, setIsAnswerCorrect] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [waitingForNext, setWaitingForNext] = useState(false);\n  const [difficultyLevel, setDifficultyLevel] = useState('all');\n\n  // State for tracking overall quiz statistics\n  const [quizStats, setQuizStats] = useState(() => {\n    const saved = localStorage.getItem('quizStatistics');\n    return saved ? JSON.parse(saved) : { totalAnswered: 0, totalCorrect: 0 };\n  });\n\n  // Translation object for UI texts\n  const t = useMemo(() => {\n    return {\n      en: {\n        selectLanguage: \"Select your language for the quiz\",\n        english: \"English\",\n        german: \"Deutsch\",\n        loading: \"Loading quiz questions...\",\n        noQuestions: \"No quiz questions available.\",\n        quizTitle: \"Rick and Morty Quiz\",\n        quizCompleted: \"Quiz Completed!\",\n        progress: (score, total) =>\n          `You answered ${score} out of ${total} questions correctly.`,\n        submit: \"Submit Answer\",\n        correctFeedback: \"Correct answer! +50 points\",\n        wrongFeedback: \"Wrong answer.\",\n        correctAnswerWas: \"The correct answer was:\",\n        next: \"Next Question\",\n        restartQuiz: \"Restart Quiz\",\n        difficulty: \"Difficulty\",\n        easy: \"Easy\",\n        medium: \"Medium\",\n        hard: \"Hard\",\n        veryHard: \"Very Hard\",\n        extreme: \"Extreme\",\n        selectDifficulty: \"Select difficulty\",\n        all: \"All Difficulties\",\n        points: \"points\",\n        questionPoints: (points) => `Worth ${points} points`\n      },\n      de: {\n        selectLanguage: \"Wählen Sie Ihre Sprache für das Quiz\",\n        english: \"Englisch\",\n        german: \"Deutsch\",\n        loading: \"Quizfragen werden geladen...\",\n        noQuestions: \"Keine Quizfragen verfügbar.\",\n        quizTitle: \"Rick and Morty Quiz\",\n        quizCompleted: \"Quiz abgeschlossen!\",\n        progress: (score, total) =>\n          `Sie haben ${score} von ${total} Fragen richtig beantwortet.`,\n        submit: \"Antwort absenden\",\n        correctFeedback: \"Richtige Antwort! +50 Punkte\",\n        wrongFeedback: \"Falsche Antwort.\",\n        correctAnswerWas: \"Die richtige Antwort war:\",\n        next: \"Nächste Frage\",\n        restartQuiz: \"Quiz neu starten\",\n        difficulty: \"Schwierigkeit\",\n        easy: \"Einfach\",\n        medium: \"Mittel\",\n        hard: \"Schwer\",\n        veryHard: \"Sehr Schwer\",\n        extreme: \"Extrem\",\n        selectDifficulty: \"Schwierigkeitsgrad wählen\",\n        all: \"Alle Schwierigkeitsgrade\",\n        points: \"Punkte\",\n        questionPoints: (points) => `Wert: ${points} Punkte`\n      }\n    };\n  }, []);\n\n  // Calculate points based on difficulty\n  const getPointsForDifficulty = (difficulty) => {\n    const difficultyMap = {\n      'easy': 30,\n      'medium': 50,\n      'hard': 80,\n      'very-hard': 120,\n      'extreme': 200\n    };\n    \n    return difficultyMap[difficulty] || 50;\n  };\n\n  // Get difficulty label based on the difficulty value\n  const getDifficultyLabel = (difficulty) => {\n    // Convert to lowercase and handle edge cases\n    const difficultyKey = difficulty ? difficulty.toLowerCase().replace(/\\s+/g, '') : 'medium';\n    \n    // Map difficulty values to t keys\n    const difficultyMap = {\n      'easy': 'easy',\n      'einfach': 'easy',\n      'medium': 'medium',\n      'mittel': 'medium',\n      'hard': 'hard',\n      'schwer': 'hard',\n      'veryhard': 'veryHard',\n      'very-hard': 'veryHard',\n      'sehrschwer': 'veryHard',\n      'extreme': 'extreme',\n      'extrem': 'extreme'\n    };\n    \n    return t[language][difficultyMap[difficultyKey] || 'medium'];\n  };\n\n  // Get CSS class for difficulty\n  const getDifficultyClass = (difficulty) => {\n    if (!difficulty) return 'medium';\n    \n    const difficultyLower = difficulty.toLowerCase().replace(/\\s+/g, '');\n    \n    if (difficultyLower === 'easy' || difficultyLower === 'einfach') return 'easy';\n    if (difficultyLower === 'medium' || difficultyLower === 'mittel') return 'medium';\n    if (difficultyLower === 'hard' || difficultyLower === 'schwer') return 'hard';\n    if (difficultyLower === 'veryhard' || difficultyLower === 'very-hard' || difficultyLower === 'sehrschwer') return 'very-hard';\n    if (difficultyLower === 'extreme' || difficultyLower === 'extrem') return 'extreme';\n    \n    return 'medium'; // Default\n  };\n\n  // Fetch quiz questions from JSON file\n  useEffect(() => {\n    if (!language) return;\n\n    setLoading(true);\n    setError('');\n\n    // Determine which JSON file to load based on language\n    const quizFile = language === 'en' ? '/quizData.en.json' : '/quizData.de.json';\n\n    fetch(quizFile)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`Failed to fetch questions (${response.status} ${response.statusText})`);\n        }\n        return response.json();\n      })\n      .then(data => {\n        // Add difficulty and points properties to each question\n        const processedQuestions = data.map(q => ({\n          ...q,\n          difficulty: determineQuestionDifficulty(q),\n          points: getPointsForDifficulty(determineQuestionDifficulty(q))\n        }));\n\n        setAllQuestions(processedQuestions);\n        selectQuizQuestions(processedQuestions, difficultyLevel);\n        setLoading(false);\n      })\n      .catch(err => {\n        console.error(\"Error loading quiz questions:\", err);\n        setError(err.message || 'Error loading quiz questions');\n        setLoading(false);\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [language]);\n\n  // Save language preference to localStorage\n  useEffect(() => {\n    localStorage.setItem('quizLanguage', language);\n  }, [language]);\n\n  // Save quiz statistics to localStorage\n  useEffect(() => {\n    localStorage.setItem('quizStatistics', JSON.stringify(quizStats));\n  }, [quizStats]);\n\n  // Select quiz questions based on difficulty level\n  const selectQuizQuestions = (questions, difficulty) => {\n    let filteredQuestions = questions;\n    \n    // Filter by difficulty if not \"all\"\n    if (difficulty !== 'all') {\n      filteredQuestions = questions.filter(q => q.difficulty === difficulty);\n    }\n    \n    // Shuffle the filtered questions\n    const shuffledQuestions = shuffleArray(filteredQuestions);\n    \n    // Take 10 questions or fewer if not enough available\n    const selectedQuestions = shuffledQuestions.slice(0, 10).map(q => ({\n      ...q,\n      shuffledOptions: shuffleArray(q.options || [])\n    }));\n    \n    setQuizQuestions(selectedQuestions);\n    setCurrentQuestion(0);\n    setScore(0);\n    setFeedback('');\n    setShowCorrectAnswer(false);\n    setIsAnswerCorrect(null);\n    setWaitingForNext(false);\n    setQuizCompleted(false);\n  };\n\n  // Update quiz when difficulty changes\n  useEffect(() => {\n    if (allQuestions.length > 0) {\n      selectQuizQuestions(allQuestions, difficultyLevel);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [difficultyLevel]);\n\n  // Handle difficulty change\n  const handleDifficultyChange = (newDifficulty) => {\n    setDifficultyLevel(newDifficulty);\n  };\n\n  // Update daily quiz counter in localStorage\n  const updateDailyQuizCount = () => {\n    const today = new Date().toISOString().slice(0, 10);\n    let data = { date: today, count: 0 };\n    \n    try {\n      const stored = localStorage.getItem('dailyQuizData');\n      if (stored) {\n        const parsed = JSON.parse(stored);\n        if (parsed.date === today) {\n          data = parsed;\n        }\n      }\n      \n      data.count = data.count + 1;\n      localStorage.setItem('dailyQuizData', JSON.stringify(data));\n    } catch (error) {\n      console.error('Error updating daily quiz count:', error);\n    }\n  };\n\n  // Handler for answering a question\n  const handleAnswer = () => {\n    const currentQuiz = quizQuestions[currentQuestion];\n    if (!currentQuiz) return;\n\n    setWaitingForNext(true);\n    \n    // Update overall statistics for each answered question\n    setQuizStats(prev => ({\n      ...prev,\n      totalAnswered: prev.totalAnswered + 1\n    }));\n    \n    if (selected === currentQuiz.answer) {\n      setScore(prev => prev + currentQuiz.points);\n      completeMission(currentQuiz.points); // Points based on difficulty\n      setFeedback(t[language].correctFeedback);\n      setIsAnswerCorrect(true);\n      \n      // Update correct answers count\n      setQuizStats(prev => ({\n        ...prev,\n        totalCorrect: prev.totalCorrect + 1\n      }));\n    } else {\n      setFeedback(t[language].wrongFeedback);\n      setShowCorrectAnswer(true);\n      setIsAnswerCorrect(false);\n    }\n  };\n\n  // Handler for moving to the next question\n  const handleNextQuestion = () => {\n    if (currentQuestion < quizQuestions.length - 1) {\n      setCurrentQuestion(prev => prev + 1);\n      setSelected('');\n      setFeedback('');\n      setShowCorrectAnswer(false);\n      setIsAnswerCorrect(null);\n      setWaitingForNext(false);\n    } else {\n      setQuizCompleted(true);\n      updateDailyQuizCount(); // Update the daily counter when the quiz is completed\n    }\n  };\n\n  // Handler for restarting the quiz\n  const handleRestartQuiz = () => {\n    // Reshuffle questions with the current difficulty\n    if (allQuestions.length > 0) {\n      selectQuizQuestions(allQuestions, difficultyLevel);\n    }\n  };\n\n  // LANGUAGE SELECTION UI\n  if (!language) {\n    return (\n      <div className=\"quiz-page\">\n        <header className=\"hero-section\">\n          <h1 className=\"hero-title\">{t.en.selectLanguage}</h1>\n        </header>\n        <section className=\"language-selection\">\n          <div className=\"hero-buttons\" style={{ justifyContent: 'center', gap: '1rem' }}>\n            <button\n              className=\"hero-button\"\n              onClick={() => setLanguage('en')}\n            >\n              {t.en.english}\n            </button>\n            <button\n              className=\"hero-button\"\n              onClick={() => setLanguage('de')}\n            >\n              {t.en.german}\n            </button>\n          </div>\n        </section>\n      </div>\n    );\n  }\n\n  if (loading) return <p className=\"loading-message\">{t[language].loading}</p>;\n  if (error) return <p className=\"error-message\">{error}</p>;\n  if (!quizQuestions || quizQuestions.length === 0)\n    return <p className=\"no-questions-message\">{t[language].noQuestions}</p>;\n\n  if (quizCompleted) {\n    return (\n      <div className=\"quiz-page quiz-completed\">\n        <h2>{t[language].quizCompleted}</h2>\n        \n        {/* Show overall statistics */}\n        <p className=\"score-summary\">\n          {language === 'de' \n            ? `Sie haben ${quizStats.totalCorrect} von ${quizStats.totalAnswered} Fragen richtig beantwortet.`\n            : `You answered ${quizStats.totalCorrect} out of ${quizStats.totalAnswered} questions correctly.`\n          }\n        </p>\n        \n        {/* Current quiz score */}\n        <p className=\"current-quiz-score\">\n          {t[language].progress(score, quizQuestions.reduce((total, q) => total + q.points, 0))}\n        </p>\n        \n        {/* Difficulty selector for next quiz */}\n        <div className=\"difficulty-selector\">\n          <label htmlFor=\"difficulty-select\">{t[language].selectDifficulty}:</label>\n          <select \n            id=\"difficulty-select\"\n            value={difficultyLevel}\n            onChange={(e) => handleDifficultyChange(e.target.value)}\n            className=\"difficulty-select\"\n          >\n            <option value=\"all\">{t[language].all}</option>\n            <option value=\"easy\">{t[language].easy}</option>\n            <option value=\"medium\">{t[language].medium}</option>\n            <option value=\"hard\">{t[language].hard}</option>\n            <option value=\"very-hard\">{t[language].veryHard}</option>\n            <option value=\"extreme\">{t[language].extreme}</option>\n          </select>\n        </div>\n        \n        <button \n          className=\"restart-button\"\n          onClick={handleRestartQuiz}\n        >\n          {t[language].restartQuiz}\n        </button>\n      </div>\n    );\n  }\n\n  const currentQuizQuestion = quizQuestions[currentQuestion] || {};\n  const difficultyClass = getDifficultyClass(currentQuizQuestion.difficulty);\n\n  return (\n    <div className={`quiz-page ${isMobile ? 'mobile' : ''}`}>\n      <h2>{t[language].quizTitle}</h2>\n      \n      {/* Difficulty selector */}\n      <div className=\"difficulty-selector\">\n        <label htmlFor=\"difficulty-select\">{t[language].selectDifficulty}:</label>\n        <select \n          id=\"difficulty-select\"\n          value={difficultyLevel}\n          onChange={(e) => handleDifficultyChange(e.target.value)}\n          className=\"difficulty-select\"\n        >\n          <option value=\"all\">{t[language].all}</option>\n          <option value=\"easy\">{t[language].easy}</option>\n          <option value=\"medium\">{t[language].medium}</option>\n          <option value=\"hard\">{t[language].hard}</option>\n          <option value=\"very-hard\">{t[language].veryHard}</option>\n          <option value=\"extreme\">{t[language].extreme}</option>\n        </select>\n      </div>\n      \n      <div className=\"question-card\">\n        <div className=\"question-header\">\n          <div className=\"question-progress\">\n            {currentQuestion + 1}/{quizQuestions.length}\n          </div>\n          \n          <div className=\"question-info\">\n            <div className={`difficulty-badge ${difficultyClass}`}>\n              {getDifficultyLabel(currentQuizQuestion.difficulty)}\n            </div>\n            <div className=\"points-badge\">\n              {t[language].questionPoints(currentQuizQuestion.points)}\n            </div>\n          </div>\n        </div>\n        \n        <p className=\"question-text\">\n          {currentQuizQuestion.question}\n        </p>\n        \n        <div className=\"options-grid\">\n          {(currentQuizQuestion.shuffledOptions || []).map((option, index) => (\n            <div\n              key={index}\n              className={`option \n                ${selected === option ? 'selected' : ''} \n                ${waitingForNext && option === currentQuizQuestion.answer ? 'correct-answer' : ''}\n                ${waitingForNext && selected === option && option !== currentQuizQuestion.answer ? 'wrong-answer' : ''}\n              `}\n              onClick={() => !waitingForNext && setSelected(option)}\n            >\n              {option}\n            </div>\n          ))}\n        </div>\n        \n        <div className=\"feedback-container\">\n          {feedback && <p className={`feedback ${isAnswerCorrect ? 'correct' : 'wrong'}`}>{feedback}</p>}\n          \n          {showCorrectAnswer && (\n            <div className=\"correct-answer-container\">\n              <p>{t[language].correctAnswerWas}</p>\n              <p className=\"correct-answer-text\">{currentQuizQuestion.answer}</p>\n            </div>\n          )}\n        </div>\n        \n        {!waitingForNext ? (\n          <button \n            onClick={handleAnswer} \n            disabled={!selected} \n            className=\"submit-button\"\n          >\n            {t[language].submit}\n          </button>\n        ) : (\n          <button \n            onClick={handleNextQuestion} \n            className=\"next-button\"\n          >\n            {t[language].next}\n          </button>\n        )}\n      </div>\n      \n      {/* Current Score Display */}\n      <div className=\"current-score\">\n        {t[language].progress(score, quizQuestions.slice(0, currentQuestion + 1).reduce((total, q) => {\n          // Only count points for answered questions and the current one\n          return total + (waitingForNext || currentQuestion > quizQuestions.indexOf(q) ? q.points : 0);\n        }, 0))}\n      </div>\n    </div>\n  );\n}\n\nexport default Quiz;"],"names":["breakpoint","arguments","length","undefined","isMobile","setIsMobile","useState","window","innerWidth","useEffect","handleResize","addEventListener","removeEventListener","shuffleArray","array","newArr","i","j","Math","floor","random","determineQuestionDifficulty","question","id","completeMission","useContext","UserContext","useIsMobile","language","setLanguage","localStorage","getItem","allQuestions","setAllQuestions","quizQuestions","setQuizQuestions","currentQuestion","setCurrentQuestion","selected","setSelected","score","setScore","quizCompleted","setQuizCompleted","feedback","setFeedback","showCorrectAnswer","setShowCorrectAnswer","isAnswerCorrect","setIsAnswerCorrect","loading","setLoading","error","setError","waitingForNext","setWaitingForNext","difficultyLevel","setDifficultyLevel","quizStats","setQuizStats","saved","JSON","parse","totalAnswered","totalCorrect","t","useMemo","en","selectLanguage","english","german","noQuestions","quizTitle","progress","total","concat","submit","correctFeedback","wrongFeedback","correctAnswerWas","next","restartQuiz","difficulty","easy","medium","hard","veryHard","extreme","selectDifficulty","all","points","questionPoints","de","fetch","then","response","ok","Error","status","statusText","json","data","processedQuestions","map","q","_objectSpread","selectQuizQuestions","catch","err","console","message","setItem","stringify","questions","filteredQuestions","filter","selectedQuestions","slice","shuffledOptions","options","handleDifficultyChange","newDifficulty","handleRestartQuiz","_jsxs","className","children","_jsx","style","justifyContent","gap","onClick","reduce","htmlFor","value","onChange","e","target","currentQuizQuestion","difficultyClass","difficultyLower","toLowerCase","replace","getDifficultyClass","difficultyKey","getDifficultyLabel","option","index","answer","handleNextQuestion","prev","updateDailyQuizCount","today","Date","toISOString","date","count","stored","parsed","handleAnswer","currentQuiz","disabled","indexOf"],"sourceRoot":""}