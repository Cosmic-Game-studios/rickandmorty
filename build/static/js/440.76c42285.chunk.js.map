{"version":3,"file":"static/js/440.76c42285.chunk.js","mappings":"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","sources":["hooks/useIsMobile.js","pages/CharacterDetails.js"],"sourcesContent":["// src/hooks/useIsMobile.js\nimport { useState, useEffect } from 'react';\n\nfunction useIsMobile(breakpoint = 768) {\n  const [isMobile, setIsMobile] = useState(() => window.innerWidth < breakpoint);\n\n  useEffect(() => {\n    const handleResize = () => {\n      setIsMobile(window.innerWidth < breakpoint);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup beim Unmount\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [breakpoint]);\n\n  return isMobile;\n}\n\nexport default useIsMobile;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, Link, useNavigate } from 'react-router-dom';\nimport useIsMobile from '../hooks/useIsMobile';\n\nfunction CharacterDetails() {\n  const navigate = useNavigate();\n  const isMobile = useIsMobile();\n  const { id } = useParams();\n  const [character, setCharacter] = useState(null);\n  const [episodes, setEpisodes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [episodesLoading, setEpisodesLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [relatedCharacters, setRelatedCharacters] = useState([]);\n  const [sortBy, setSortBy] = useState('episode');\n\n  // Verbesserte Funktion zum Laden der Charakterdetails\n  const fetchCharacterDetails = useCallback(async () => {\n    setLoading(true);\n    setError('');\n    try {\n      // Lade Character-Daten mit Timeout\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 Sekunden Timeout\n      \n      const response = await fetch(`https://rickandmortyapi.com/api/character/${id}`, {\n        signal: controller.signal\n      });\n      \n      clearTimeout(timeoutId);\n      \n      if (!response.ok) {\n        if (response.status === 404) {\n          throw new Error('Character not found. They might be in another dimension!');\n        }\n        throw new Error(`Error loading character (${response.status})`);\n      }\n      \n      const data = await response.json();\n      setCharacter(data);\n      \n      // Lade Episoden-Daten gleich mit, falls vorhanden\n      if (data.episode && data.episode.length > 0) {\n        const episodeIds = data.episode.map(ep => ep.split('/').pop());\n        \n        const epResponse = await fetch(`https://rickandmortyapi.com/api/episode/${episodeIds.join(',')}`);\n        \n        if (!epResponse.ok) {\n          throw new Error('Error loading episodes.');\n        }\n        \n        const epData = await epResponse.json();\n        // Stelle sicher, dass wir immer ein Array zurückgeben\n        setEpisodes(Array.isArray(epData) ? epData : [epData]);\n\n        // Lade ähnliche Charaktere (aus der gleichen Spezies)\n        try {\n          const relatedResponse = await fetch(`https://rickandmortyapi.com/api/character/?species=${encodeURIComponent(data.species)}`);\n          if (relatedResponse.ok) {\n            const relatedData = await relatedResponse.json();\n            // Filtere aktuellen Charakter heraus und begrenze auf 4\n            const filtered = relatedData.results\n              .filter(char => char.id !== data.id)\n              .slice(0, 4);\n            setRelatedCharacters(filtered);\n          }\n        } catch (err) {\n          console.error('Error loading related characters:', err);\n        }\n      } else {\n        setEpisodes([]);\n      }\n    } catch (err) {\n      if (err.name === 'AbortError') {\n        setError('Request timed out. Please check your connection and try again.');\n      } else {\n        setError(err.message || 'Failed to load character');\n      }\n      console.error('Error loading character details:', err);\n    } finally {\n      setLoading(false);\n      setEpisodesLoading(false);\n    }\n  }, [id]);\n\n  useEffect(() => {\n    fetchCharacterDetails();\n  }, [fetchCharacterDetails]);\n\n  // Zurück-Navigation mit Browser-History\n  const handleGoBack = () => {\n    navigate(-1); // Geht zur vorherigen Seite zurück\n  };\n\n  // Episoden nach dem gewählten Kriterium sortieren\n  const sortedEpisodes = episodes.length > 0 \n    ? [...episodes].sort((a, b) => {\n        if (sortBy === 'episode') {\n          return a.episode.localeCompare(b.episode);\n        } else if (sortBy === 'name') {\n          return a.name.localeCompare(b.name);\n        } else if (sortBy === 'airDate') {\n          return new Date(a.air_date) - new Date(b.air_date);\n        }\n        return 0;\n      })\n    : [];\n\n  // Helfer-Funktion für Status-Farbe\n  const getStatusClass = (status) => {\n    switch (status?.toLowerCase()) {\n      case 'alive': return 'status-alive';\n      case 'dead': return 'status-dead';\n      default: return 'status-unknown';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"character-loading\">\n        <div className=\"character-loading-spinner\"></div>\n        <p>Loading character details...</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"character-error\">\n        <h2>Oops! Something went wrong</h2>\n        <p>{error}</p>\n        <div className=\"character-error-actions\">\n          <button onClick={fetchCharacterDetails} className=\"retry-button\">Try Again</button>\n          <Link to=\"/characters\" className=\"back-link\">Back to Characters</Link>\n        </div>\n      </div>\n    );\n  }\n\n  // Destrukturierung für bessere Lesbarkeit\n  const {\n    name,\n    image,\n    status,\n    species,\n    gender,\n    origin,\n    location,\n    type,\n    created\n  } = character;\n\n  return (\n    <div className={`character-details-page ${isMobile ? 'mobile' : 'desktop'}`}>\n      {/* Zurück-Button für bessere Navigation */}\n      <div className=\"character-details-header\">\n        <button onClick={handleGoBack} className=\"back-button\">\n          <span className=\"back-icon\">←</span> Back\n        </button>\n      </div>\n\n      <div className=\"character-card-detail\">\n        {/* Bild mit Status-Indikator */}\n        <div className=\"detail-image-container\">\n          <img \n            src={image} \n            alt={name} \n            className=\"detail-image\" \n            loading=\"lazy\" \n          />\n          <span className={`status-badge ${getStatusClass(status)}`}>\n            <span className=\"status-indicator\"></span>\n            {status}\n          </span>\n        </div>\n\n        <div className=\"detail-info\">\n          <h2 className=\"character-name\">{name}</h2>\n          \n          <div className=\"character-stats\">\n            <div className=\"stat-badge\">\n              <span className=\"stat-label\">Species</span>\n              <span className=\"stat-value\">{species}</span>\n            </div>\n            \n            <div className=\"stat-badge\">\n              <span className=\"stat-label\">Gender</span>\n              <span className=\"stat-value\">{gender}</span>\n            </div>\n            \n            <div className=\"stat-badge\">\n              <span className=\"stat-label\">Origin</span>\n              <span className=\"stat-value\">{origin?.name}</span>\n            </div>\n            \n            <div className=\"stat-badge\">\n              <span className=\"stat-label\">Location</span>\n              <span className=\"stat-value\">{location?.name}</span>\n            </div>\n            \n            {type && (\n              <div className=\"stat-badge\">\n                <span className=\"stat-label\">Type</span>\n                <span className=\"stat-value\">{type}</span>\n              </div>\n            )}\n          </div>\n          \n          <div className=\"character-meta\">\n            <div className=\"character-created\">\n              <span>Added to database: </span>\n              <span>{new Date(created).toLocaleDateString()}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Episoden-Abschnitt mit Sortierung */}\n      <div className=\"episode-list\">\n        <div className=\"episode-header\">\n          <h3>Episodes featuring {name}</h3>\n          <div className=\"episode-sort\">\n            <span>Sort by:</span>\n            <select \n              value={sortBy} \n              onChange={(e) => setSortBy(e.target.value)}\n              className=\"episode-sort-select\"\n            >\n              <option value=\"episode\">Episode Number</option>\n              <option value=\"name\">Name</option>\n              <option value=\"airDate\">Air Date</option>\n            </select>\n          </div>\n        </div>\n\n        {episodesLoading ? (\n          <p>Loading episodes...</p>\n        ) : sortedEpisodes.length > 0 ? (\n          <div className=\"episodes-grid\">\n            {sortedEpisodes.map(ep => (\n              <div key={ep.id} className=\"episode-card\">\n                <div className=\"episode-card-header\">\n                  <span className=\"episode-code\">{ep.episode}</span>\n                  <span className=\"episode-air-date\">{ep.air_date}</span>\n                </div>\n                <h4 className=\"episode-title\">{ep.name}</h4>\n                <Link to={`/episode/${ep.id}`} className=\"episode-link\">\n                  View Episode Details\n                </Link>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <p>No episodes found.</p>\n        )}\n      </div>\n\n      {/* Ähnliche Charaktere Abschnitt */}\n      {relatedCharacters.length > 0 && (\n        <div className=\"related-characters\">\n          <h3>Similar Characters</h3>\n          <div className=\"related-characters-grid\">\n            {relatedCharacters.map(char => (\n              <Link \n                key={char.id} \n                to={`/character/${char.id}`}\n                className=\"related-character-card\"\n              >\n                <img \n                  src={char.image} \n                  alt={char.name} \n                  className=\"related-character-image\" \n                  loading=\"lazy\" \n                />\n                <div className=\"related-character-info\">\n                  <h4>{char.name}</h4>\n                  <span className={`status-badge small ${getStatusClass(char.status)}`}>\n                    <span className=\"status-indicator\"></span>\n                    {char.status}\n                  </span>\n                </div>\n              </Link>\n            ))}\n          </div>\n        </div>\n      )}\n\n      <Link to=\"/characters\" className=\"back-link\">\n        Back to All Characters\n      </Link>\n    </div>\n  );\n}\n\nexport default CharacterDetails;"],"names":["breakpoint","arguments","length","undefined","isMobile","setIsMobile","useState","window","innerWidth","useEffect","handleResize","addEventListener","removeEventListener","navigate","useNavigate","useIsMobile","id","useParams","character","setCharacter","episodes","setEpisodes","loading","setLoading","episodesLoading","setEpisodesLoading","error","setError","relatedCharacters","setRelatedCharacters","sortBy","setSortBy","fetchCharacterDetails","useCallback","async","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","concat","signal","clearTimeout","ok","status","Error","data","json","episode","episodeIds","map","ep","split","pop","epResponse","join","epData","Array","isArray","relatedResponse","encodeURIComponent","species","filtered","results","filter","char","slice","err","console","name","message","sortedEpisodes","sort","a","b","localeCompare","Date","air_date","getStatusClass","toLowerCase","_jsxs","className","children","_jsx","onClick","Link","to","image","gender","origin","location","type","created","handleGoBack","src","alt","toLocaleDateString","value","onChange","e","target"],"sourceRoot":""}